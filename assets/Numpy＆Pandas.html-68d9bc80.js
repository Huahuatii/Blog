import{_ as e,W as t,X as p,Y as n,Z as c,$ as o,a1 as s,D as i}from"./framework-179f767b.js";const l={},d=s(`<h1 id="numpy" tabindex="-1"><a class="header-anchor" href="#numpy" aria-hidden="true">#</a> Numpy</h1><p><code>np.random.shuffle()</code>：改变原始数组的顺序，使得数组中的元素随机打乱，从而实现随机采样等操作。</p><details class="hint-container details"><summary>np.random.shffle()</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment"># 创建一个一维数组</span>
a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 将数组中的元素随机排列</span>
np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 打印排列后的数组</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h1 id="pandas" tabindex="-1"><a class="header-anchor" href="#pandas" aria-hidden="true">#</a> Pandas</h1><p><code>dataframe.index.intersection()</code>：方法返回两个 Index 对象的交集。返回一个包含两个 Index 对象中共同存在的标签的新 Index 对象；</p><p><code>dataframe.index.difference()</code>：方法返回两个 Index 对象的差集。返回一个包含存在于第一个 Index 对象中但不存在于第二个 Index 对象中的标签的新 Index 对象。</p>`,6),u={class:"hint-container details"},r=s(`<summary>dataframe.index.intersection() ＆ dataframe.index.difference()</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 创建两个 Index 对象</span>
index1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
index2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 获取它们的交集</span>
intersection <span class="token operator">=</span> index1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>index2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>intersection<span class="token punctuation">)</span> <span class="token comment"># Index([&#39;B&#39;, &#39;D&#39;], dtype=&#39;object&#39;)</span>

<span class="token comment"># 获取它们的差集</span>
difference <span class="token operator">=</span> index1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>index2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>difference<span class="token punctuation">)</span> <span class="token comment"># Index([&#39;A&#39;, &#39;C&#39;, &#39;E&#39;], dtype=&#39;object&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,3),k={href:"https://www.numpy.org.cn/reference/%E2%80%94%E2%80%94Numpy%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"举个例子，我有10个样本，类别分别是[‘A’, ‘A’, ‘A’, ‘B’, ‘B’, ‘B’, ‘B’, ‘B’, ‘C’, ‘C’]，使用KNN预测结果是[‘A’, ‘A’, ‘A’, ‘B’, ‘B’, ‘B’, ‘B’, ‘B’, ‘D’, ‘D’, ]，然后我想输出结果的时候能够显示对于ABCD四个类的precision和recall的字典",-1);function v(h,b){const a=i("ExternalLinkIcon");return t(),p("div",null,[d,n("details",u,[r,n("p",null,[n("a",k,[c("https://www.numpy.org.cn/reference/——Numpy官方文档"),o(a)])]),m])])}const x=e(l,[["render",v],["__file","Numpy＆Pandas.html.vue"]]);export{x as default};
