const n=JSON.parse(`{"key":"v-75d0bfb6","path":"/posts/%E6%A8%A1%E5%9E%8B%E5%AE%9E%E8%B7%B5/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AAMLP%E6%A8%A1%E5%9E%8B.html","title":"从0开始搭建Auto-Encoder","lang":"en-US","frontmatter":{"title":"从0开始搭建Auto-Encoder","date":"2023-03-18T00:00:00.000Z","tag":["Deep Learning","Model Practice","MLP"],"category":["深度学习","搭建模型"],"description":"从0开始搭建Auto-Encoder 搭建Auto-Encoder模型的时候，选择了更加结构化的搭建模式： 搭建base_ae：这一步用来确定一个ae模型的基本结构会有哪些（其中有部分未必会用到） 1 搭建base_AE模型 初始化 编码函数 解码函数 采样函数 生成函数 前向传播（抽象方法） 损失函数（抽象方法） 'base_ae.py' from torch import nn from abc import abstractmethod # 定义抽象方法 from typing import TypeVar # 定义数据类新的接口 from typing import List, Any Tensor = TypeVar('torch.tensor') # 定义泛型变量，表示一个 PyTorch 的 tensor class BaseAE(nn.Module): def __init__(self) -&gt; None: # 初始化神经网络模型的各个组件 super(BaseAE, self).__init__() def encode(self, input: Tensor) -&gt; List[Tensor]: # 定义一个编码过程 raise NotImplementedError def decode(self, input: Tensor) -&gt; List[Tensor]: # 定义一个解码过程 raise NotImplementedError def sample(self, batch_size: int, current_device: int, **kwargs) -&gt; Tensor: # 定义一个采样方法 raise RuntimeWarning() def generate(self, x: Tensor, **kwargs) -&gt; Tensor: # 定义一个生成方法 raise NotImplementedError def initialize_weights(self) -&gt; None: # 定义初始化权重方法 raise NotImplementedError @abstractmethod # 装饰器，声明下面的方法为抽象方法 def forward(self, *inputs: Tensor) -&gt; Tensor: # 定义前向传播过程 pass @abstractmethod def loss_function(self, *inputs: Any, **kwargs) -&gt; Tensor: # 定义损失函数 pass","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://Huahuatii.github.io/zh/posts/%E6%A8%A1%E5%9E%8B%E5%AE%9E%E8%B7%B5/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AAMLP%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:url","content":"https://Huahuatii.github.io/posts/%E6%A8%A1%E5%9E%8B%E5%AE%9E%E8%B7%B5/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AAMLP%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Huahuatii's Blog"}],["meta",{"property":"og:title","content":"从0开始搭建Auto-Encoder"}],["meta",{"property":"og:description","content":"从0开始搭建Auto-Encoder 搭建Auto-Encoder模型的时候，选择了更加结构化的搭建模式： 搭建base_ae：这一步用来确定一个ae模型的基本结构会有哪些（其中有部分未必会用到） 1 搭建base_AE模型 初始化 编码函数 解码函数 采样函数 生成函数 前向传播（抽象方法） 损失函数（抽象方法） 'base_ae.py' from torch import nn from abc import abstractmethod # 定义抽象方法 from typing import TypeVar # 定义数据类新的接口 from typing import List, Any Tensor = TypeVar('torch.tensor') # 定义泛型变量，表示一个 PyTorch 的 tensor class BaseAE(nn.Module): def __init__(self) -&gt; None: # 初始化神经网络模型的各个组件 super(BaseAE, self).__init__() def encode(self, input: Tensor) -&gt; List[Tensor]: # 定义一个编码过程 raise NotImplementedError def decode(self, input: Tensor) -&gt; List[Tensor]: # 定义一个解码过程 raise NotImplementedError def sample(self, batch_size: int, current_device: int, **kwargs) -&gt; Tensor: # 定义一个采样方法 raise RuntimeWarning() def generate(self, x: Tensor, **kwargs) -&gt; Tensor: # 定义一个生成方法 raise NotImplementedError def initialize_weights(self) -&gt; None: # 定义初始化权重方法 raise NotImplementedError @abstractmethod # 装饰器，声明下面的方法为抽象方法 def forward(self, *inputs: Tensor) -&gt; Tensor: # 定义前向传播过程 pass @abstractmethod def loss_function(self, *inputs: Any, **kwargs) -&gt; Tensor: # 定义损失函数 pass"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Deep Learning"}],["meta",{"property":"article:tag","content":"Model Practice"}],["meta",{"property":"article:tag","content":"MLP"}],["meta",{"property":"article:published_time","content":"2023-03-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从0开始搭建Auto-Encoder\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 搭建base_AE模型","slug":"_1-搭建base-ae模型","link":"#_1-搭建base-ae模型","children":[]},{"level":2,"title":"2 搭建具体AE模型","slug":"_2-搭建具体ae模型","link":"#_2-搭建具体ae模型","children":[]},{"level":2,"title":"3 调用模型进行训练（这里以网格搜索参数法为例）","slug":"_3-调用模型进行训练-这里以网格搜索参数法为例","link":"#_3-调用模型进行训练-这里以网格搜索参数法为例","children":[]},{"level":2,"title":"4 根据编码器进行预测","slug":"_4-根据编码器进行预测","link":"#_4-根据编码器进行预测","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.14,"words":2742},"filePathRelative":"posts/模型实践/从头开始写一个MLP模型.md","localizedDate":"March 18, 2023","excerpt":"<h1> 从0开始搭建Auto-Encoder</h1>\\n<p>搭建Auto-Encoder模型的时候，选择了更加结构化的搭建模式：</p>\\n<ol>\\n<li>搭建base_ae：这一步用来确定一个ae模型的基本结构会有哪些（其中有部分未必会用到）</li>\\n</ol>\\n<h2> 1 搭建base_AE模型</h2>\\n<ul>\\n<li>初始化</li>\\n<li>编码函数</li>\\n<li>解码函数</li>\\n<li>采样函数</li>\\n<li>生成函数</li>\\n<li>前向传播（抽象方法）</li>\\n<li>损失函数（抽象方法）</li>\\n</ul>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token string\\">'base_ae.py'</span>\\n<span class=\\"token keyword\\">from</span> torch <span class=\\"token keyword\\">import</span> nn\\n<span class=\\"token keyword\\">from</span> abc <span class=\\"token keyword\\">import</span> abstractmethod  <span class=\\"token comment\\"># 定义抽象方法</span>\\n<span class=\\"token keyword\\">from</span> typing <span class=\\"token keyword\\">import</span> TypeVar  <span class=\\"token comment\\"># 定义数据类新的接口</span>\\n<span class=\\"token keyword\\">from</span> typing <span class=\\"token keyword\\">import</span> List<span class=\\"token punctuation\\">,</span> Any\\nTensor <span class=\\"token operator\\">=</span> TypeVar<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'torch.tensor'</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 定义泛型变量，表示一个 PyTorch 的 tensor</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">BaseAE</span><span class=\\"token punctuation\\">(</span>nn<span class=\\"token punctuation\\">.</span>Module<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 初始化神经网络模型的各个组件</span>\\n        <span class=\\"token builtin\\">super</span><span class=\\"token punctuation\\">(</span>BaseAE<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>__init__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">encode</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">:</span> Tensor<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> List<span class=\\"token punctuation\\">[</span>Tensor<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义一个编码过程</span>\\n        <span class=\\"token keyword\\">raise</span> NotImplementedError\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">:</span> Tensor<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> List<span class=\\"token punctuation\\">[</span>Tensor<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义一个解码过程</span>\\n        <span class=\\"token keyword\\">raise</span> NotImplementedError\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">sample</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> batch_size<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> current_device<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">**</span>kwargs<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> Tensor<span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义一个采样方法</span>\\n        <span class=\\"token keyword\\">raise</span> RuntimeWarning<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">generate</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">:</span> Tensor<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">**</span>kwargs<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> Tensor<span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义一个生成方法</span>\\n        <span class=\\"token keyword\\">raise</span> NotImplementedError\\n        \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">initialize_weights</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义初始化权重方法</span>\\n        <span class=\\"token keyword\\">raise</span> NotImplementedError\\n\\n    <span class=\\"token decorator annotation punctuation\\">@abstractmethod</span>  <span class=\\"token comment\\"># 装饰器，声明下面的方法为抽象方法</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">forward</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>inputs<span class=\\"token punctuation\\">:</span> Tensor<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> Tensor<span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义前向传播过程</span>\\n        <span class=\\"token keyword\\">pass</span>\\n\\n    <span class=\\"token decorator annotation punctuation\\">@abstractmethod</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">loss_function</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>inputs<span class=\\"token punctuation\\">:</span> Any<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">**</span>kwargs<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> Tensor<span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 定义损失函数</span>\\n        <span class=\\"token keyword\\">pass</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
